{"version":3,"sources":["Search/Search.tsx","Info/Info.tsx","Weather/Weather.tsx","index.tsx"],"names":["Search","props","search","setQuery","className","type","placeholder","onChange","e","target","value","onClick","Info","output","weather","main","message","name","sys","country","Math","round","temp","description","api","WeatherApp","useState","setWeather","query","mounted","useRef","handleError","error","current","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","fetch","then","res","json","result","searchForUserWeather","useEffect","ReactDOM","render","StrictMode","Weather","document","getElementById"],"mappings":"sPAkBeA,MAhBf,SAAgBC,GACd,IAAQC,EAAqBD,EAArBC,OAAQC,EAAaF,EAAbE,SAChB,OACE,sBAAKC,UAAU,SAAf,UACE,uBACEC,KAAK,OACLD,UAAU,cACVE,YAAY,eACZC,SAAU,SAACC,GAAD,OAAOL,EAASK,EAAEC,OAAOC,UAErC,wBAAQL,KAAK,SAAS,aAAW,SAASD,UAAU,iBAAiBO,QAAS,kBAAMT,W,MCgC3EU,MA1Bf,SAAcX,GACZ,IACIY,EADIC,EAAYb,EAAZa,QAsBR,OAhBED,EAD0B,qBAAjBC,EAAQC,KACRD,EAAQE,QAGf,qCACE,sBAAKZ,UAAU,iBAAf,UAEGU,EAAQG,KAFX,KAEmBH,EAAQI,IAAIC,WAE/B,sBAAKf,UAAU,oBAAf,UACGgB,KAAKC,MAAMP,EAAQC,KAAKO,MAD3B,WAIA,qBAAKlB,UAAU,eAAf,SAA+BU,EAAQA,QAAQ,GAAGS,iBAIjD,qBAAKnB,UAAU,OAAf,SAAuBS,KCrC1BW,EACC,mCADDA,EAEE,2CAqEOC,MAlEf,WACE,MAA8BC,mBAAS,CAAEV,QAAS,QAAlD,mBAAOF,EAAP,KAAgBa,EAAhB,KACA,EAA0BD,mBAAS,IAAnC,mBAAOE,EAAP,KAAczB,EAAd,KAGM0B,EAAUC,kBAAO,GAavB,SAASC,EAAYC,GAEfL,EADJK,EACe,CAAEhB,QAASgB,EAAMhB,SACjB,CAAEA,QAAS,+CAqC5B,OApDKa,EAAQI,UACPC,UAAUC,YACZD,UAAUC,YAAYC,oBA6B1B,SAAyBC,GACvB,MAAgCA,EAASC,OAAjCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,UAIrB,SAA8BD,EAAmBC,GAC/CC,MAAM,GAAD,OAAIjB,EAAJ,uBAA2BgB,EAA3B,gBAA2CD,EAA3C,gCAA4Ef,IAC9EkB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLlB,EAAWkB,MAPfC,CAAqBP,EAAWC,KA/B4BT,GAE1DA,KAeJgB,qBAAU,WAERlB,EAAQI,SAAU,IACjB,IA+BD,sBAAK7B,UAAU,cAAf,UACE,cAAC,EAAD,CAAQF,OAAQ,WATlBuC,MAAM,GAAD,OAAIjB,EAAJ,qBAAyBI,EAAzB,+BAAqDJ,IACvDkB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLlB,EAAWkB,OAM6B1C,SAAUA,IACpD,cAAC,EAAD,CAAMW,QAASA,QChErBkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAGFC,SAASC,eAAe,W","file":"static/js/main.a60b8746.chunk.js","sourcesContent":["import './search.css';\r\n\r\nfunction Search(props: { search: () => void; setQuery: (str: string) => void; }): JSX.Element {\r\n  const { search, setQuery } = props;\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"search__bar\"\r\n        placeholder=\"Type city...\"\r\n        onChange={(e) => setQuery(e.target.value)}\r\n      />\r\n      <button type=\"button\" aria-label=\"Search\" className=\"search__button\" onClick={() => search()} />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import './info.css';\r\n\r\ninterface Weather {\r\n  main?: {\r\n    temp: number;\r\n  };\r\n  message?: string;\r\n  sys?: {\r\n    country: string;\r\n  };\r\n  weather?: [\r\n    {\r\n      description?: string;\r\n    }\r\n  ];\r\n  name?: string;\r\n}\r\n\r\nfunction Info(props: { weather: Weather }): JSX.Element {\r\n  const { weather } = props;\r\n  let output;\r\n  // 1. Show ... when nothing typed yet.\r\n  // 2. Show error message when no city was found.\r\n  // 3. Else show content.\r\n  if (typeof weather.main === 'undefined') {\r\n    output = weather.message;\r\n  } else {\r\n    output = (\r\n      <>\r\n        <div className=\"info__location\">\r\n          {/* @ts-expect-error: if weather.main === 'undefined' then weather.sys is too */}\r\n          {weather.name}, {weather.sys.country}\r\n        </div>\r\n        <div className=\"info__temperature\">\r\n          {Math.round(weather.main.temp)}Â°c\r\n        </div>\r\n        {/* @ts-expect-error: if weather.main === 'undefined' then weather.weather[0] is too */}\r\n        <div className=\"info__clouds\">{weather.weather[0].description}</div>\r\n      </>\r\n    );\r\n  }\r\n  return <div className=\"info\">{output}</div>;\r\n}\r\n\r\nexport default Info;\r\n","import { useState, useEffect, useRef } from 'react';\nimport Search from '../Search/Search';\nimport Info from '../Info/Info';\n\nconst api = {\n  key: '1fd834a005e103644a2bc3e131f251ab',\n  base: 'https://api.openweathermap.org/data/2.5/',\n};\n\nfunction WeatherApp(): JSX.Element {\n  const [weather, setWeather] = useState({ message: '...' });\n  const [query, setQuery] = useState('');\n\n  // Use useFef to preserve mounted.current value for subsequent renders.\n  const mounted = useRef(false);\n  if (!mounted.current) {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(getUserPosition, handleError);\n    } else {\n      handleError();\n    }\n  }\n\n  interface Error {\n     message: string\n  }\n\n  function handleError(error?: Error) {\n    error\n      ? setWeather({ message: error.message })\n      : setWeather({ message: 'Your browser is not supporting geolocation' });\n  }\n\n  // Pass empty array as second argument so it never needs to re-run after first mount.\n  useEffect(() => {\n    // Set mounted.current to true after first render.\n    mounted.current = true;\n  }, []);\n\n  type Position = {\n    coords: {\n      longitude: number;\n      latitude: number;\n    };\n  };\n\n  function getUserPosition(position: Position) {\n    const { longitude, latitude } = position.coords;\n    searchForUserWeather(longitude, latitude);\n  }\n\n  function searchForUserWeather(longitude: number, latitude: number) {\n    fetch(`${api.base}weather?lat=${latitude}&lon=${longitude}&&units=metric&APPID=${api.key}`)\n      .then((res) => res.json())\n      .then((result) => {\n        setWeather(result);\n      });\n  }\n\n  function searchForWeather() {\n    fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then((res) => res.json())\n      .then((result) => {\n        setWeather(result);\n      });\n  }\n\n  return (\n    <div className=\"weather-box\">\n      <Search search={() => searchForWeather()} setQuery={setQuery} />\n      <Info weather={weather} />\n    </div>\n  );\n}\n\nexport default WeatherApp;\n","// eslint-disable-next-line no-use-before-define\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WeatherBox from './Weather/Weather';\n\nReactDOM.render(\n  <React.StrictMode>\n    <WeatherBox />\n  </React.StrictMode>,\n\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}